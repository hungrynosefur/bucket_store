-- 3번의 a - 월별 주문 회원 수, 주문 수, 주문 금액, 할인 금액, 배송비

SELECT
    TO_CHAR(order_date, 'YYYY-MM') AS month,
    COUNT(DISTINCT user_id) AS num_users,
    COUNT(order_id) AS num_orders,
    SUM(order_amount) AS total_order_amount,
    SUM(discount_amount) AS total_discount_amount,
    SUM(shipping_fee) AS total_shipping_fee
FROM
    "Order"
GROUP BY
    TO_CHAR(order_date, 'YYYY-MM');

-- 3번의 b - 매월 1회 이상 주문한 회원 수

SELECT
    TO_CHAR(order_date, 'YYYY-MM') AS month,
    COUNT(DISTINCT user_id) AS num_users
FROM
    "Order"
GROUP BY
    TO_CHAR(order_date, 'YYYY-MM')
HAVING
    COUNT(order_id) >= 1;


-- 3번의 b-i - 최근 3개월간 평균 주문 금액이 100만원이 넘는 회원 수

SELECT
    COUNT(*) AS num_users
FROM (
    SELECT
        user_id,
        AVG(monthly_order_amount) AS avg_last_3_months
    FROM (
        SELECT
            user_id,
            TO_CHAR(order_date, 'YYYY-MM') AS month,
            SUM(order_amount) AS monthly_order_amount
        FROM
            "Order"
        WHERE
            order_date >= ADD_MONTHS(SYSDATE, -3)
        GROUP BY
            user_id,
            TO_CHAR(order_date, 'YYYY-MM')
    ) monthly_orders
    GROUP BY
        user_id
) avg_orders
WHERE
    avg_last_3_months > 1000000;

-- 3번의 c - 3월에 A 브랜드를 처음으로 구매한 회원들의 주문 건

SELECT
    COUNT(DISTINCT o.user_id) AS num_users,
    COUNT(o.order_id) AS num_orders,
    SUM(o.order_amount) AS total_order_amount,
    SUM(o.discount_amount) AS total_discount_amount,
    SUM(o.shipping_fee) AS total_shipping_fee
FROM
    "Order" o
JOIN
    OrderDetail od ON o.order_id = od.order_id
JOIN
    Product p ON od.product_code = p.product_code
WHERE
    p.brand_id = 'A'
    AND EXTRACT(MONTH FROM o.order_date) = 3
    AND o.user_id IN (
        SELECT
            user_id
        FROM
            "Order" o2
        JOIN
            OrderDetail od2 ON o2.order_id = od2.order_id
        JOIN
            Product p2 ON od2.product_code = p2.product_code
        WHERE
            p2.brand_id = 'A'
            AND EXTRACT(MONTH FROM o2.order_date) = 3
        GROUP BY
            user_id
        HAVING
            MIN(o2.order_date) = MIN(o2.order_date)
    );

-- 3번의 d - 회원 페이지 뷰 로그를 기준으로 30분 단위 유저 세션 그룹핑

-- 세션 테이블 생성
CREATE TABLE UserSession (
    session_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id VARCHAR2(50),
    session_start TIMESTAMP,
    session_end TIMESTAMP,
    page_count NUMBER,
    unique_page_count NUMBER
);

-- 세션 데이터 삽입
INSERT INTO UserSession (user_id, session_start, session_end, page_count, unique_page_count)
SELECT
    user_id,
    MIN(access_timestamp) AS session_start,
    MAX(access_timestamp) AS session_end,
    COUNT(*) AS page_count,
    COUNT(DISTINCT page) AS unique_page_count
FROM (
    SELECT
        user_id,
        access_timestamp,
        page,
        CASE
            WHEN LAG(access_timestamp) OVER (PARTITION BY user_id ORDER BY access_timestamp) IS NULL
                OR (access_timestamp - LAG(access_timestamp) OVER (PARTITION BY user_id ORDER BY access_timestamp)) > INTERVAL '30' MINUTE
            THEN 1
            ELSE 0
        END AS is_new_session
    FROM
        PageViewLog
) session_data
GROUP BY
    user_id,
    is_new_session;

-- 지표 1: 일별 세션 수
SELECT
    TRUNC(session_start) AS day,
    COUNT(session_id) AS num_sessions
FROM
    UserSession
GROUP BY
    TRUNC(session_start);

-- 지표 2: 월별 평균 세션 유지 시간
SELECT
    TO_CHAR(session_start, 'YYYY-MM') AS month,
    ROUND(AVG(EXTRACT(MINUTE FROM (session_end - session_start))), 2) AS avg_session_duration_minutes
FROM
    UserSession
WHERE
    EXTRACT(MINUTE FROM (session_end - session_start)) > 0
GROUP BY
    TO_CHAR(session_start, 'YYYY-MM');

-- 지표 3: 세션별 평균 총 페이지 수 및 유니크 페이지 수
SELECT
    ROUND(AVG(page_count), 2) AS avg_page_count,
    ROUND(AVG(unique_page_count), 2) AS avg_unique_page_count
FROM
    UserSession;


